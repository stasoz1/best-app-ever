{"version":3,"sources":["reportWebVitals.js","redux/actions/actionTypes.js","redux/actions/cryptoActions.js","components/Crypto.js","components/CryptoCurrencyList.js","redux/reducers/themeState.js","redux/reducers/cryptosState.js","redux/reducers/rootReducer.js","redux/store.js","components/Header.js","redux/actions/themeActions.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GET_CRYPTO_SUCCESS","GET_CRYPTO_FAILURE","GET_CRYPTO_STARTED","GET_CRYPTO_ENDED","CHANGE_THEME","getCryptoSuccess","crypto","type","payload","getCryptoStarted","loading","getCryptoEnded","getCryptoFailure","error","cardStyleWhite","backgroundColor","cardStyleBlack","textStyleWhite","color","textStyleBlack","Crypto","props","cryptos","cryptoName","cryptoCurrencies","isDark","useSelector","state","themeState","className","style","map","cryptoCurrency","index","value","displayType","thousandSeparator","renderText","CryptoCurrencyList","dispatch","useDispatch","useEffect","axios","get","res","data","catch","err","message","cryptosState","renderedListItems","Object","keys","key","destr","entries","padding","margin","initialState","action","combineReducers","composedEnhancers","compose","applyMiddleware","thunk","createStore","rootReducer","undefined","Header","onChangeThemeBtnClick","changeTheme","align","text","float","marginRight","onClick","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.8aa28b19.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const GET_CRYPTO_SUCCESS = 'GET_CRYPTO_SUCCESS'\r\nexport const GET_CRYPTO_FAILURE = 'GET_CRYPTO_FAILURE'\r\nexport const GET_CRYPTO_STARTED = 'GET_CRYPTO_STARTED'\r\nexport const GET_CRYPTO_ENDED = 'GET_CRYPTO_ENDED'\r\n\r\nexport const CHANGE_THEME = 'CHANGE_THEME'","import { GET_CRYPTO_FAILURE, GET_CRYPTO_STARTED, GET_CRYPTO_SUCCESS, GET_CRYPTO_ENDED } from './actionTypes'\r\nimport axios from 'axios';\r\n\r\nexport const addCrypto = () => {\r\n    return dispatch => {\r\n      dispatch(getCryptoStarted());\r\n      axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,LTC,ETH,XRP,BCH,DOGE&tsyms=USD,UAH')\r\n        .then(res => {\r\n          dispatch(getCryptoSuccess(res.data));\r\n        })\r\n        .then(() => dispatch(getCryptoEnded()))\r\n        .catch(err => {\r\n          dispatch(getCryptoFailure(err.message));\r\n        });\r\n    };\r\n  };\r\n\r\nconst getCryptoSuccess = crypto => ({\r\n    type: GET_CRYPTO_SUCCESS,\r\n    payload: { \r\n      ...crypto \r\n    }\r\n})\r\n\r\nconst getCryptoStarted = () => ({\r\n    type: GET_CRYPTO_STARTED,\r\n    payload: {\r\n      loading: true\r\n    }\r\n});\r\n\r\nconst getCryptoEnded = () => ({\r\n  type: GET_CRYPTO_ENDED,\r\n  payload: {\r\n    loading: false\r\n  }\r\n});\r\n  \r\nconst getCryptoFailure = error => ({\r\n    type: GET_CRYPTO_FAILURE,\r\n    payload: {\r\n      error\r\n    }\r\n});","import React from 'react'\r\nimport NumberFormat from 'react-number-format';\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst cardStyleWhite = {\r\n    backgroundColor: \"#f1f1f1\"\r\n}\r\n\r\nconst cardStyleBlack = {\r\n    backgroundColor: \"#403b3b\"\r\n}\r\n\r\nconst textStyleWhite = {\r\n    color: \"#f1f1f1\"\r\n}\r\n\r\nconst textStyleBlack = {\r\n    color: \"#403b3b\"\r\n}\r\n\r\nconst Crypto = (props) => {\r\n    let { cryptoName, cryptoCurrencies } = props.cryptos\r\n    let isDark = useSelector(state => state.themeState.isDark)\r\n\r\n    return (\r\n        <div className=\"column\" style={ isDark ? textStyleWhite : textStyleBlack }>\r\n            <div className=\"card\" style={ isDark ? cardStyleBlack : cardStyleWhite }>\r\n                <div>\r\n                    <h2><b>{cryptoName}</b></h2>\r\n                </div>\r\n                <ul className=\"card-group\">\r\n                    {cryptoCurrencies.map((cryptoCurrency, index) => {\r\n                        return <NumberFormat value={cryptoCurrency[1]} displayType={'text'} thousandSeparator={true} renderText={value => <li key={index}>{cryptoCurrency[0]}: {value}</li>} />\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Crypto","import { useDispatch, useSelector } from 'react-redux'\r\nimport { addCrypto } from '../redux/actions/cryptoActions'\r\nimport { useEffect } from 'react'\r\nimport Crypto from './Crypto'\r\n\r\nconst CryptoCurrencyList = () => {\r\n    const dispatch = useDispatch()\r\n    \r\n    useEffect(() => {\r\n        dispatch(addCrypto())\r\n    }, [])\r\n    \r\n    const cryptos = useSelector(state => state.cryptosState.cryptos);\r\n    const renderedListItems = Object.keys(cryptos).map((value, key) => {\r\n        var destr = ({cryptoName: value, cryptoCurrencies: Object.entries(cryptos[value])})\r\n        return (<Crypto cryptos={destr} key={key}/>)\r\n    })\r\n    \r\n    return(\r\n        <div>\r\n            <div className=\"row\" style={{padding:\"25px\", margin:\"0\"}}>\r\n                {renderedListItems}\r\n            </div>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default CryptoCurrencyList","import { CHANGE_THEME } from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    isDark: false\r\n};\r\n\r\nconst themeState = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_THEME: {\r\n            return { ...state, isDark: action.payload } \r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default themeState","import { GET_CRYPTO_SUCCESS, GET_CRYPTO_STARTED, GET_CRYPTO_ENDED, GET_CRYPTO_FAILURE } from '../actions/actionTypes'\r\n\r\nconst initialState = {\r\n    cryptos: [],\r\n    loading: null,\r\n    error: null\r\n};\r\n\r\nconst cryptosState = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_CRYPTO_SUCCESS: {\r\n            return { ...state, cryptos: action.payload } \r\n        }\r\n        case GET_CRYPTO_STARTED: {\r\n            return { ...state, loading: action.payload }\r\n        }\r\n        case GET_CRYPTO_ENDED: {\r\n            return { ...state, loading: action.payload }\r\n        }\r\n        case GET_CRYPTO_FAILURE: {\r\n            return { ...state, error: action.payload}\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default cryptosState","import { combineReducers } from 'redux'\r\nimport themeState from './themeState'\r\nimport cryptosState from './cryptosState'\r\n\r\nexport default combineReducers({ \r\n    themeState, \r\n    cryptosState \r\n})","import { createStore, compose, applyMiddleware } from 'redux'\r\nimport rootReducer from './reducers/rootReducer'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst composedEnhancers = compose(\r\n    applyMiddleware(thunk))\r\n\r\nexport default createStore(rootReducer, undefined, composedEnhancers)","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { changeTheme } from '../redux/actions/themeActions'\r\nimport { WiMoonAltWaxingCrescent5, WiMoonAltWaningGibbous5 } from 'react-icons/wi';\r\nimport { Wave, Random } from 'react-animated-text';\r\n\r\nconst Header = () => {\r\n    const isDark = useSelector(state => state.themeState.isDark)\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeThemeBtnClick = () => {\r\n        dispatch(changeTheme(!isDark))\r\n    }\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <h1 className=\"logo\" align=\"center\">\r\n                <Random text=\"Crypto father\" />\r\n                {isDark \r\n                    ? <WiMoonAltWaningGibbous5 style={{float:\"right\", marginRight:\"30px\"}} onClick={onChangeThemeBtnClick}/> \r\n                    : <WiMoonAltWaxingCrescent5 style={{float:\"right\", marginRight:\"30px\"}} onClick={onChangeThemeBtnClick}/>\r\n                }\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import { CHANGE_THEME } from './actionTypes'\r\n\r\nexport const changeTheme = isDark => ({\r\n    type: CHANGE_THEME,\r\n    payload: isDark\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport CryptoCurrencyList from './components/CryptoCurrencyList'\nimport store from './redux/store'\nimport Header from './components/Header'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Header/>\n      <CryptoCurrencyList/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}