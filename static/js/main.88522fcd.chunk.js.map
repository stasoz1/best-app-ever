{"version":3,"sources":["reportWebVitals.js","redux/actions/actionTypes.js","components/Crypto.js","components/CryptoCurrencyList.js","redux/reducers/themeState.js","redux/reducers/cryptosState.js","redux/reducers/rootReducer.js","redux/store.js","components/Header.js","redux/actions/themeActions.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GET_CRYPTO_SUCCESS","GET_CRYPTO_FAILURE","GET_CRYPTO_STARTED","GET_CRYPTO_ENDED","CHANGE_THEME","cardStyleWhite","backgroundColor","cardStyleBlack","textStyleWhite","color","textStyleBlack","Crypto","props","cryptos","cryptoName","cryptoCurrencies","isDark","useSelector","state","themeState","className","style","map","cryptoCurrency","index","value","displayType","thousandSeparator","renderText","CryptoCurrencyList","cryptosState","renderedListItems","Object","keys","key","destr","entries","padding","margin","initialState","action","type","payload","BTC","USD","UAH","LTC","RPC","Papkoin","Shkoda","loading","error","combineReducers","composedEnhancers","process","REACT_APP_ENV","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","rootReducer","undefined","Header","dispatch","useDispatch","onChangeThemeBtnClick","changeTheme","align","text","float","marginRight","onClick","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.88522fcd.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const GET_CRYPTO_SUCCESS = 'GET_CRYPTO_SUCCESS'\r\nexport const GET_CRYPTO_FAILURE = 'GET_CRYPTO_FAILURE'\r\nexport const GET_CRYPTO_STARTED = 'GET_CRYPTO_STARTED'\r\nexport const GET_CRYPTO_ENDED = 'GET_CRYPTO_ENDED'\r\n\r\nexport const CHANGE_THEME = 'CHANGE_THEME'","import React from 'react'\r\nimport NumberFormat from 'react-number-format';\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst cardStyleWhite = {\r\n    backgroundColor: \"#f1f1f1\"\r\n}\r\n\r\nconst cardStyleBlack = {\r\n    backgroundColor: \"#403b3b\"\r\n}\r\n\r\nconst textStyleWhite = {\r\n    color: \"#f1f1f1\"\r\n}\r\n\r\nconst textStyleBlack = {\r\n    color: \"#403b3b\"\r\n}\r\n\r\nconst Crypto = (props) => {\r\n    let { cryptoName, cryptoCurrencies } = props.cryptos\r\n    let isDark = useSelector(state => state.themeState.isDark)\r\n\r\n    return (\r\n        <div className=\"column\" style={ isDark ? textStyleWhite : textStyleBlack }>\r\n            <div className=\"card\" style={ isDark ? cardStyleBlack : cardStyleWhite }>\r\n                <div>\r\n                    <h2><b>{cryptoName}</b></h2>\r\n                </div>\r\n                <ul className=\"card-group\">\r\n                    {cryptoCurrencies.map((cryptoCurrency, index) => {\r\n                        return <NumberFormat value={cryptoCurrency[1]} displayType={'text'} thousandSeparator={true} renderText={value => <li key={index}>{cryptoCurrency[0]}: {value}</li>} />\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Crypto","import { useDispatch, useSelector } from 'react-redux'\r\nimport { addCrypto, getCryptoStarted } from '../redux/actions/cryptoActions'\r\nimport { useEffect } from 'react'\r\nimport Crypto from './Crypto'\r\nimport Loader from './Loader'\r\n\r\nconst CryptoCurrencyList = () => {\r\n    // const dispatch = useDispatch()\r\n\r\n    // dispatch(getCryptoStarted());\r\n    // useEffect(() => {\r\n    //     dispatch(addCrypto())\r\n    // }, [])\r\n    \r\n    const cryptos = useSelector(state => state.cryptosState.cryptos);\r\n    const renderedListItems = Object.keys(cryptos).map((value, key) => {\r\n        var destr = ({cryptoName: value, cryptoCurrencies: Object.entries(cryptos[value])})\r\n        return (<Crypto cryptos={destr} key={key}/>)\r\n    })\r\n    return(\r\n        <div>\r\n            <div className=\"row\" style={{padding:\"25px\", margin:\"0\"}}>\r\n                {renderedListItems}\r\n            </div>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default CryptoCurrencyList","import { CHANGE_THEME } from \"../actions/actionTypes\";\r\n\r\nconst initialState = {\r\n    isDark: false\r\n};\r\n\r\nconst themeState = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_THEME: {\r\n            return { ...state, isDark: action.payload } \r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default themeState","import { GET_CRYPTO_SUCCESS, GET_CRYPTO_STARTED, GET_CRYPTO_ENDED, GET_CRYPTO_FAILURE } from '../actions/actionTypes'\r\n\r\nconst initialState = {\r\n    cryptos: {\r\n        BTC: {\r\n            USD: 47681.7,\r\n            UAH: 1289.36\r\n        },\r\n        LTC: {\r\n            USD: 172.74,\r\n            UAH: 4673\r\n        },\r\n        RPC: {\r\n            USD: 23423.74,\r\n            UAH: 4673\r\n        },\r\n        Papkoin: {\r\n            USD: 23.74,\r\n            UAH: 21\r\n        },\r\n        Shkoda: {\r\n            USD: 23.74,\r\n            UAH: 21\r\n        }\r\n    },\r\n    loading: null,\r\n    error: null\r\n};\r\n\r\nconst cryptosState = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_CRYPTO_SUCCESS: {\r\n            return { ...state, cryptos: action.payload } \r\n        }\r\n        case GET_CRYPTO_STARTED: {\r\n            return { ...state, loading: action.payload }\r\n        }\r\n        case GET_CRYPTO_ENDED: {\r\n            return { ...state, loading: action.payload }\r\n        }\r\n        case GET_CRYPTO_FAILURE: {\r\n            return { ...state, error: action.payload}\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default cryptosState","import { combineReducers } from 'redux'\r\nimport themeState from './themeState'\r\nimport cryptosState from './cryptosState'\r\n\r\nexport default combineReducers({ \r\n    themeState, \r\n    cryptosState \r\n})","import { createStore, compose, applyMiddleware } from 'redux'\r\nimport rootReducer from './reducers/rootReducer'\r\nimport thunk from 'redux-thunk'\r\nconst { REACT_APP_ENV } = process.env;\r\n\r\nconst composedEnhancers = REACT_APP_ENV == 'test' \r\n    ? compose(applyMiddleware(thunk),\r\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n    : compose(applyMiddleware(thunk))\r\n\r\nexport default createStore(rootReducer, undefined, composedEnhancers)","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { changeTheme } from '../redux/actions/themeActions'\r\nimport { WiMoonAltWaxingCrescent5, WiMoonAltWaningGibbous5 } from 'react-icons/wi';\r\nimport { Wave, Random } from 'react-animated-text';\r\n\r\nconst Header = () => {\r\n    const isDark = useSelector(state => state.themeState.isDark)\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeThemeBtnClick = () => {\r\n        dispatch(changeTheme(!isDark))\r\n    }\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <h1 className=\"logo\" align=\"center\">\r\n                <Random text=\"Crypto father\" />\r\n                {isDark \r\n                    ? <WiMoonAltWaningGibbous5 style={{float:\"right\", marginRight:\"30px\"}} onClick={onChangeThemeBtnClick}/> \r\n                    : <WiMoonAltWaxingCrescent5 style={{float:\"right\", marginRight:\"30px\"}} onClick={onChangeThemeBtnClick}/>\r\n                }\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import { CHANGE_THEME } from './actionTypes'\r\n\r\nexport const changeTheme = isDark => ({\r\n    type: CHANGE_THEME,\r\n    payload: isDark\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport CryptoCurrencyList from './components/CryptoCurrencyList'\nimport store from './redux/store'\nimport Header from './components/Header'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Header/>\n      <CryptoCurrencyList/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}